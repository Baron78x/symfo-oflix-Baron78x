security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        # Firewall qui intercepte la route de login API
        login:
            pattern: ^/api/v1/login
            stateless: true
            json_login:
                check_path: /api/v1/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall qui gère les routes de l'API
        api:
            pattern:   ^/api/v1
            stateless: true
            jwt: ~

        # Routes de dev
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Toutes les autres du projet (l'appli HTML O'flix front/back)
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login

            logout:
                # Correspond au nom de la route name="logout"
                path: logout

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        
        # Front : Si user ANONYME : page d'accueil + fiche film seulement.
        # Pas besoin de PUBLIC_ACCESS sur les chemins enaccès libre
        # Car nous avons un front qui est libre d'accès
        # @link https://symfony.com/doc/5.4/security.html#allowing-unsecured-access-i-e-anonymous-users

        # Front : Si ROLE_USER : ajouter une critique sur un film.
        - { path: ^/movie/.+/review/add, roles: ROLE_USER }

        # Back : Sécuriser toutes les routes /new /edit /delete avec ROLE_ADMIN.
        # On configure d'abord les règles pour le ROLE_ADMIN afin de restreindre l'accès à ROLE_MANAGER

        - { path: ^/back/(movie|season|user)/new, roles: ROLE_ADMIN }
        - { path: ^/back/(movie|season|user)/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/back/(movie|season|user)/\d+, roles: ROLE_ADMIN, methods: POST }

        # Back : Si ROLE_MANAGER : accès aux pages de listes movie, genres etc. et pages show (si existantes).
        - { path: ^/back, roles: ROLE_MANAGER }

        # back_movie_index           GET        ANY      ANY    /back/movie                        
        # back_movie_show            GET        ANY      ANY    /back/movie/{id}                   

        # back_season_index          GET        ANY      ANY    /back/season/movie/{id}            
        # back_season_show           GET        ANY      ANY    /back/season/{id}

        # Routes de l'API
        - { path: ^/api/v1/movies, methods: POST, roles: ROLE_ADMIN }
    
    role_hierarchy:
        # Le rôle ADMIN hérite du rôle MANAGER
        ROLE_ADMIN: ROLE_MANAGER
        # Pour que les admins et les managers puisse écrire une critique de film
        ROLE_MANAGER: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
